{"version":3,"sources":["components/Signup.js","components/Login.js","containers/Nav.js","containers/Home.js","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","Signup","state","username","email","password1","password2","signUp","bind","handleChange","e","preventDefault","this","setState","target","name","value","console","log","post","then","res","data","catch","err","className","method","type","onSubmit","htmlFor","placeholder","onChange","Component","Login","password","handleLogin","autoComplete","Nav","handleLogout","alert","detail","to","onClick","Home","App","showComponent","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4d57821b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../App.css';\n\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n\nclass Signup extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      username: '',\n      email: '',\n      password1: '',\n      password2: '',\n    }\n\n    this.signUp = this.signUp.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(e) {\n    e.preventDefault();\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  signUp(e) {\n    e.preventDefault();\n    // let formData = new FormData();\n    // formData.append('username', this.state.username);\n    // formData.append('email', this.state.email);\n    // console.log(formData);\n\n    console.log(this.state);\n    axios.post('http://localhost:3000/rest-auth/registration/', this.state,)\n    .then(res => {\n      console.log(res);\n      console.log(res.data);\n    })\n    .catch(err => {console.log(err);})\n  }\n\n  render() {\n    return (\n      <div className=\"card-body\">\n        <form method=\"post\" type=\"submit\" onSubmit={this.signUp}>\n          <label htmlFor=\"username\">Username:</label>\n          <input type=\"text\" name=\"username\" placeholder=\"Username\" value={this.state.username} onChange={this.handleChange}/>\n          <label htmlFor=\"email\">Email:</label>\n          <input type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\n          <label htmlFor=\"password\">Password:</label>\n          <input type=\"password\" name=\"password1\" value={this.state.password1} onChange={this.handleChange} />\n          <label htmlFor=\"password_2\">Password Confirm:</label>\n          <input type=\"password\" name=\"password2\" value={this.state.password2} onChange={this.handleChange} />\n          <button className=\"btn btn-outline-success\">Register</button>\n        </form>\n      </div>\n\n    )\n  }\n}\n\nexport default Signup;\n","import React, {Component} from 'react';\nimport '../App.css';\n\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      username: '',\n      password: '',\n    }\n\n    this.handleLogin = this.handleLogin.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(e) {\n    e.preventDefault();\n    this.setState({[e.target.name]: e.target.value});\n\n  }\n\n  handleLogin(e) {\n    e.preventDefault();\n    console.log('hello');\n    axios.post('http://localhost:3000/rest-auth/login/', this.state,)\n    .then(res => {\n      console.log(res);\n      console.log(res.data);\n    })\n    .catch(err => {console.log(err);})\n  }\n\n  render() {\n    return (\n\n    <div className=\"card-body\">\n      <form method=\"post\" type=\"submit\" onSubmit={this.handleLogin}>\n        <label htmlFor=\"username\">Username:</label>\n          <input type=\"text\" value={this.state.username} autoComplete=\"username\" name=\"username\" onChange={this.handleChange} />\n        <label htmlFor=\"password\">Password:</label>\n          <input type=\"password\" value={this.state.password} autoComplete=\"current-password\" name=\"password\" onChange={this.handleChange} />\n        <button>Log In</button>\n      </form>\n    </div>\n\n\n\n    )\n  }\n}\n\nexport default Login;\n","import React, {Component} from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom';\n\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n\nclass Nav extends Component {\n  constructor() {\n    super();\n    this.handleLogout = this.handleLogout.bind(this)\n\n  }\n\n  handleLogout(e) {\n    e.preventDefault();\n    axios.post('http://localhost:3000/rest-auth/logout/',)\n    .then(res => {\n      console.log(res, res.data);\n      alert(res.data.detail);\n    })\n    .catch(err => {console.log(err);})\n  }\n\n\n  render() {\n    return (\n      <div className=\"row no-gutters\">\n        <ul>\n        <Link to=\"/\">\n          <li>\n            Home\n          </li>\n        </Link>\n        <Link to=\"/login\">\n          <li>\n            Login\n          </li>\n        </Link>\n        <Link to=\"/logout\" onClick={this.handleLogout}>\n          <li>\n            Logout\n          </li>\n        </Link>\n        <Link to=\"/signup\">\n          <li>\n          Sign Up\n          </li>\n        </Link>\n\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Nav;\n","import React, {Component} from 'react';\nimport '../App.css';\n\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n\nclass Home extends Component {\n  \n\n  render() {\n    return (\n      <div className=\"row no-gutters\">\n        <h1>This is the Home Page</h1>\n      </div>\n    )\n  }\n}\n\nexport default Home;\n","import React, {Component} from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Signup from './components/Signup.js';\nimport Login from './components/Login.js';\nimport Nav from './containers/Nav.js';\nimport Home from './containers/Home.js';\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      showComponent: '',\n    }\n\n  }\n  render() {\n    return(\n      <Router>\n        <div className='container-fluid'>\n          <Nav />\n          <Switch>\n          <Route path=\"/\" exact component={Home} />\n\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={Signup} />\n\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import'bootstrap/dist/css/bootstrap.min.css';\nimport $ from'jquery';\nimport Popper from 'popper.js';\nimport'bootstrap/dist/js/bootstrap.bundle.min';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}